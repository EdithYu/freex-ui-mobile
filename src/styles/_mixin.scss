@mixin button-size($padding-y, $padding-x, $font-size, $border-raduis) {
  padding: $padding-y $padding-x;
  font-size: $font-size;
  border-radius: $border-raduis;
}

@mixin button-style(
  $background,
  $border,
  $color,
  $hover-background: lighten($background, 7.5%),
  $hover-border: lighten($border, 10%),
  $hover-color: $color,
) {
  color: $color;
  background: $background;
  border-color: $border;
  &:hover {
    color: $hover-color;
    background: $hover-background;
    border-color: $hover-border;    
  }
  &:focus,
  &.focus {
    color: $hover-color;
    background: $hover-background;
    border-color: $hover-border;    
  }
  &:disabled,
  &.disabled {
    color: $color;
    background: $background;
    border-color: $border;    
  }
}

@mixin zoom-animation(
  $direction: 'top',
  $scaleStart: scaleY(0),
  $scaleEnd: scaleY(1),
  $origin: center top,
) {
  .zoom-in-#{$direction}-enter {
    opacity: 0;
    transform: $scaleStart;
  }
  .zoom-in-#{$direction}-enter-active {
    opacity: 1;
    transform: $scaleEnd;
    transition: transform 300ms cubic-bezier(0.23, 1, 0.32, 1) 100ms, opacity 300ms cubic-bezier(0.23, 1, 0.32, 1) 100ms;
    transform-origin: $origin
  }
  .zoom-in-#{$direction}-exit {
    opacity: 1;
  }
  .zoom-in-#{$direction}-exit-active {
    opacity: 0;
    transform: $scaleStart;
    transition: transform 300ms cubic-bezier(0.23, 1, 0.32, 1) 100ms, opacity 300ms cubic-bezier(0.23, 1, 0.32, 1) 100ms;
    transform-origin: $origin;
  }
}

@mixin fade-animation(
  $direction: 'top',
  $transform: translate3d(20%, 0, 0)
) {
  .fade-#{$direction}-enter {
    opacity: 0;
    transform: $transform
  }
  .fade-#{$direction}-enter-active {
    opacity: 1;
    transform: translate3d(0, 0, 0);
    transition: all 300ms cubic-bezier(0.215, 0.61, 0.355, 1);
  }
  .fade-#{$direction}-exit {
    transform: translate3d(0, 0, 0);
    opacity: 1;
  }
  .fade-#{$direction}-exit-active {
    opacity: 0;
    transform: $transform;
    transition: all 250ms linear;
  }
}

@mixin border-right-radius($raduis) {
  border-top-right-radius: $raduis;
  border-bottom-right-radius: $raduis;
}

@mixin border-left-radius($raduis) {
  border-top-left-radius: $raduis;
  border-bottom-left-radius: $raduis;
}

@mixin insetBottom($height: 0px) {
  padding-bottom: calc(#{$height} + constant(safe-area-inset-bottom));
  padding-bottom: calc(#{$height} + env(safe-area-inset-bottom));
}
@mixin insetTop($height: 0px) {
  padding-top: calc(#{$height} + constant(safe-area-inset-top));
  padding-top: calc(#{$height} + env(safe-area-inset-top));
}

@mixin hairline-common($direction) {
  content: '';
  position: absolute;
  z-index: 2;
  transform-origin: 100% 50%;
  @if ($direction == top) {
    transform: scaleY(0.5) translateY(-100%);
    @media (min-resolution: 3dppx) {
      transform: scaleY(0.33) translateY(-100%)
    }
  } @else if ($direction == bottom) {
    transform: scaleY(0.5) translateY(100%);
    @media (min-resolution: 3dppx) {
      transform: scaleY(0.33) translateY(100%)
    }
  } @else if ($direction == left) {
    transform: scaleX(0.5) translateX(-100%);
    @media (min-resolution: 3dppx) {
      transform: scaleX(0.33) translateX(-100%)
    }
  } @else if ($direction == right) {
    transform: scaleX(0.5) translateX(100%);
    @media (min-resolution: 3dppx) {
      transform: scaleX(0.33) translateX(100%)
    }
  }
}

@mixin hairline($direction: all, $color: $color-border-base, $radius: 0, $size: $border-width-base) {
  @if ($direction == top) {
    &::after {
      @include hairline-common($direction);
      top:0;
      left: 0;
      right: auto;
      bottom: auto;
      width: 100%;
      border-top: solid $size $color;
      transform-origin: 50% 0;
    }
  } @else if ($direction == bottom) {
    &::before {
      @include hairline-common($direction);
      bottom:0;
      left: 0;
      right: auto;
      top: auto;
      width: 100%;
      border-bottom: solid $size $color;
      transform-origin: 50% 100%;
    }
  } @else if ($direction == left) {
    &::before {
      @include hairline-common($direction);
      top:0;
      left: 0;
      right: auto;
      bottom: auto;
      width: 100%;
      border-left: solid $size $color;
      transform-origin: 0% 50%;
    }
  } @else if ($direction == right) {
    &::before {
      @include hairline-common($direction);
      top:0;
      right: 0;
      left: auto;
      bottom: auto;
      width: 100%;
      border-right: solid $size $color;
      transform-origin: 100% 50%;
    }
  } @else {
    &::after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: auto;
      bottom: auto;
      width: 200%;
      height: 200%;
      border: solid $size color;
      box-sizing: border-box;
      transform-origin: 0 0;
      transform: scale(0.5);
      z-index: 2;
      @if ($radius is a 'unit') {
        border-radius: $radius * 2;
      } @else {
        border-radius: "calc(%s * 2)" % $radius;
      }
    }
  }
}
 

@mixin remove-hairline ($direction: all) {
  @if ($direction == top) {
    &::after {
      display: none;
    }
  } @else if ($direction == bottom) {
    &::before {
      display: none;
    }
  } @else if ($direction == left) {
    &::after {
      display: none;
    }
  } @else if ($direction == right) {
    &::before {
      display: none;
    }
  } @else {
    &::after {
      display: none;
    }
  }
}

@mixin ellipsis {
  width: auto;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}
